pipeline {
    agent any

    environment {
        APP_NAME = "unifier-app"
        DOCKER_IMAGE = "unifier:${BUILD_NUMBER}"
        DEPLOY_ENV = "staging"
    }

    options {
        timeout(time: 30, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    stages {

        stage('Checkout') {
            steps {
                echo "üåÄ Checking out source code..."
                checkout([$class: 'GitSCM', branches: [[name: '*/main']],
                          userRemoteConfigs: [[url: 'https://github.com/ch-balaram/unifier.git']]])
            }
        }

        stage('Setup Python Environment') {
            steps {
                echo "üêç Setting up Python environment..."
                sh '''
                    python3 -m venv venv
                    source venv/bin/activate
                    pip install -r requirements.txt
                '''
            }
        }

        stage('Build') {
            parallel {
                stage('Backend Build') {
                    steps {
                        echo "‚öôÔ∏è Building backend..."
                        sh 'mvn clean package -DskipTests'
                    }
                }
                stage('Frontend Build') {
                    steps {
                        echo "üé® Building frontend..."
                        sh '''
                            npm install
                            npm run build
                        '''
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                echo "üß™ Running unit tests..."
                sh '''
                    pytest --maxfail=2 --disable-warnings -q
                    npm test
                '''
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                    archiveArtifacts artifacts: 'reports/**/*', fingerprint: true
                }
                failure {
                    mail to: 'devops-team@company.com',
                         subject: "‚ùå Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                         body: "Build failed. Check Jenkins for details."
                }
            }
        }

        stage('Docker Build and Push') {
            steps {
                echo "üê≥ Building Docker image..."
                sh '''
                    docker build -t $DOCKER_IMAGE .
                    docker tag $DOCKER_IMAGE myregistry.io/$DOCKER_IMAGE
                    docker push myregistry.io/$DOCKER_IMAGE
                '''
            }
        }

        stage('Deploy') {
            when {
                branch 'main'
            }
            steps {
                echo "üöÄ Deploying $APP_NAME to $DEPLOY_ENV..."
                sh '''
                    kubectl config use-context ${DEPLOY_ENV}
                    kubectl apply -f k8s/deployment.yaml
                    kubectl rollout status deployment/${APP_NAME}
                '''
            }
        }
    }

    post {
        success {
            echo "‚úÖ Build and deployment successful!"
        }
        failure {
            echo "‚ùå Build failed!"
        }
        always {
            cleanWs()
        }
    }
}