import sys
import logging
from pathlib import Path
import yaml

from detector import detect_file_type
from parsers.jenkins_parser import parse_jenkinsfile
from report_generator import generate_report  # keep this from old version

# ---------- Logging Setup ----------
LOG_PATH = "logs/conversion.log"
logging.basicConfig(
    filename=LOG_PATH,
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s: %(message)s'
)

# ---------- Step Mapping ----------
def map_step_to_github(cmd: str) -> str:
    """
    Placeholder mapping function: converts Jenkins sh/echo to GitHub Actions run
    Can later be replaced with more advanced mapping logic or AI-based rules
    """
    return f"run: {cmd}"

# ---------- YAML Generation ----------
def generate_github_actions_yaml(parsed_data, output_file: Path):
    workflow = {
        "name": "Converted CI/CD Workflow",
        "on": ["push"],
        "jobs": {}
    }

    for stage in parsed_data.get("stages", []):
        job_name = stage["name"].lower().replace(" ", "_")
        steps_list = [{"uses": "actions/checkout@v4"}]  # always checkout first

        for step_cmd in stage["steps"]:
            steps_list.append({"run": step_cmd})

        workflow["jobs"][job_name] = {
            "runs-on": "ubuntu-latest",
            "steps": steps_list
        }

    with open(output_file, "w", encoding="utf-8") as f:
        yaml.dump(workflow, f, sort_keys=False)

# ---------- Main Conversion ----------
def run_conversion(input_file: str, output_dir: str = "output"):
    output_path = Path(output_dir)
    output_path.mkdir(parents=True, exist_ok=True)

    logging.info(f"Starting conversion for: {input_file}")
    print(f"Converting: {input_file} ...")

    file_type = detect_file_type(input_file)
    logging.info(f"Detected file type: {file_type}")

    if file_type == "jenkins":
        parsed_data = parse_jenkinsfile(input_file)
    elif file_type == "buildspec":
        logging.warning("Buildspec parser not implemented yet")
        print("❌ Buildspec detected but parser not implemented.")
        return
    else:
        logging.error(f"Unsupported or unknown file type: {file_type}")
        print(f"❌ Unsupported or unknown file type: {file_type}")
        return

    # Log parsed data
    logging.info(f"Parsed stages: {len(parsed_data.get('stages', []))}")
    for stage in parsed_data.get("stages", []):
        logging.info(f"Stage: {stage['name']} with steps: {stage['steps']}")

    # Map steps
    mappings = []
    for stage in parsed_data.get("stages", []):
        for step in stage["steps"]:
            mapped = map_step_to_github(step)
            mappings.append({"original": step, "converted": mapped})
            logging.info(f"Mapped step: '{step}' -> '{mapped}'")

    # Generate YAML
    yaml_file = output_path / "converted.yml"
    generate_github_actions_yaml(parsed_data, yaml_file)

    # Generate report
    report_file = Path("reports/conversion_report.txt")
    report_file.parent.mkdir(parents=True, exist_ok=True)
    generate_report(report_file, parsed_data, mappings, [], yaml_file)

    logging.info(f"Conversion completed. YAML: {yaml_file}, Report: {report_file}")
    print("✅ Conversion complete!")
    print(f"Output YAML: {yaml_file}")
    print(f"Report: {report_file}")
    print(f"Logs: {LOG_PATH}")

# ---------- CLI ----------
if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python src/converter.py <input_file> [output_dir]")
        sys.exit(1)

    input_file = sys.argv[1]
    output_dir = sys.argv[2] if len(sys.argv) > 2 else "output"
    run_conversion(input_file, output_dir)